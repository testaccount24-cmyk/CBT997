  /* --------------------  rexx procedure  -------------------- *
  | Name:      zigigeni                                        |
  |                                                            |
  | Function:  ZIGI Generalized Installer Setup Routine        |
  |                                                            |
  |            Will copy the generalized installer exec from   |
  |            the ZIGI Exec library into the ZIGI managed     |
  |            repositories root directory as zginstall.rex    |
  |            with a chmod +x.                                |
  |                                                            |
  | Syntax:    rc = zigigeni(omvsdir)                          |
  |                                                            |
  |            rc = 0 is ok                                    |
  |            rc = 4 is not                                   |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            09/28/24 LBD - Get env values from sharenv ispf |
  |                           variable                         |
  |            04/23/24 LBD - Add zgcvtenc routine copy        |
  |            06/15/23 LBD - Add env ICONV_EBCDIC_ZOS_UNIX=1  |
  |            09/16/22 LBD - Fix view_std lrecl               |
  |            07/19/22 LBD - Fix chtag mixed error            |
  |            04/21/22 LBD - Fix environment and add tagging  |
  |            06/03/21 LBD - Change SHAREAS to REQUIRED       |
  |            06/26/20 LBD - Add git add and if clean do      |
  |                           a git commit                     |
  |            06/14/20 LBD - Update long message remove add.  |
  |            06/11/20 LBD - Creation                         |
  | ---------------------------------------------------------- |
  |    zigi - the z/OS ISPF Git Interface                      |
  |    Copyright (C) 2020-2024 - Henri Kuiper and Lionel Dyck  |
  |                                                            |
  |    This program is free software: you can redistribute it  |
  |    and/or modify it under the terms of the GNU General     |
  |    Public License as published by the Free Software        |
  |    Foundation, either version 3 of the License, or (at     |
  |    your option) any later version.                         |
  |                                                            |
  |    This program is distributed in the hope that it will be |
  |    useful, but WITHOUT ANY WARRANTY; without even the      |
  |    implied warranty of MERCHANTABILITY or FITNESS FOR A    |
  |    PARTICULAR PURPOSE.  See the GNU General Public License |
  |    for more details.                                       |
  |                                                            |
  |    You should have received a copy of the GNU General      |
  |    Public License along with this program.  If not, see    |
  |    <https://www.gnu.org/licenses/>.                        |
  * ---------------------------------------------------------- */

  parse arg omvsdir

  parse value '' with null
  zerrhm   = 'zigih00'
  zerralrm = 'NO'
  zerrtp   = 'NOTIFY'

  /* ----------------------------- *
  | Find active exec library name |
  * ----------------------------- */
  parse source x1 x2 x3 ddn dsn .

  if dsn = '?' then do
    x = listdsi(ddn 'FILE')
    dsn = sysdsname
  end

  panels = translate(dsn,' ','.')
  panels = subword(panels,1,words(panels)-1)' PANELS'
  panels = translate(panels,'.',' ')
  panels = "'"panels"(ZIGIGENI)'"

  dsn = "'"sysdsname"(zginstal)'"
  if sysdsn(dsn) /= 'OK' then do
    zerrsm = 'Error'
    zerrlm = 'There was a problem finding the ZGINSTAL REXX Exec Library.'
    Address ISPExec 'Setmsg msg(isrz003)'
    return 4
  end

  dsnc = "'"sysdsname"(zgcvtenc)'"
  if sysdsn(dsn) /= 'OK' then do
    zerrsm = 'Error'
    zerrlm = 'There was a problem finding the ZGCVTENC REXX Exec Library.'
    Address ISPExec 'Setmsg msg(isrz003)'
    return 4
  end

  /* ------------------------------------------------------------- *
  | Copy the ZGINSTAL REXX member into zginstall.rex and copy the |
  | ZIGIGENI ISPF Panel member (not really a panel) into          |
  | zginstall.readme, then copy zgcvtenc into zgcvtenc.awk        |
  * ------------------------------------------------------------- */
  address ispexec 'vget (codep sharenv)'
  envi = 0
  do forever
     parse value sharenv with envv '~~' sharenv
     if strip(sharenv) = null then leave
     envi = envi + 1
     env.envi = strip(envv)
     end
  env.0 = envi
  commit = null
  if check_clean() = 'YES' then do
  commit = "&& git commit -m 'ZIGI Generalized Installation Tool added.'"
  com_push = 'PUSH'
  end
  else com_push = 'COMMIT with a PUSH'
  cmd = 'cd' omvsdir ,
    '&& cp -v "//'dsn'" zginstall.rex' ,
    '&& cp -v "//'panels'" zginstall.readme' ,
    '&& cp -v "//'dsnc'" zgcvtenc.awk' ,
    '&& chmod +x zginstall.rex' ,
    '&& chtag -tc' codep 'zginstall.rex' ,
    '&& chtag -tc' codep 'zginstall.readme' ,
    '&& chtag -tc' codep 'zgcvtenc.awk' ,
    '&& git add zginstall.rex zginstall.readme zgcvtenc.awk' commit
  x = docmd(cmd)
  if x > 0 then call view_std 'B'

  zs1 = 'The ZIGI Generalized Installation Tool has been' ,
    'copied into the Git'
  zs2 = 'repository. Both' ,
    'zginstall.rex, zginstall.readme, and zgcvtenc.awk have been created.'
  zs3 = 'A' com_push 'should now be performed.'
  Address ISPExec
  call do_popup
  return 0

  /* ---------------------------------------- *
  | Common routine for normal (2 line) popup |
  * ---------------------------------------- */
Do_Popup:
  call pfshow 'off'           /* make sure pfshow is off */
  'Addpop row(4) column(4)'
  'Display Panel(zigipop3)'
  'Rempop'
  call pfshow 'reset'         /* restore pfshow setting */
  return

  /* ------------------------------------------------------ *
  | The pfshow routine will:                               |
  | 1. check to see the passed option                      |
  | 2. if Off then it will save the current pfshow setting |
  |    - save the current setting                          |
  |    - turn off pfshow                                   |
  | 3. if the option is Reset then it will                 |
  |    - test if pfshow was on and turn it back on         |
  * ------------------------------------------------------ */
pfshow:
  if zpfshow = 'OFF' then return
  arg pfkopt
  if pfkopt = 'RESET' then do
    if pfkeys = 'ON' then
    'select pgm(ispopf) parm(FKA,ON)'
  end
  if pfkopt = 'OFF' then do
    'vget (zpfshow)'
    pfkeys = zpfshow
    if pfkeys /= 'OFF' then
    'select pgm(ispopf) parm(FKA,OFF)'
  end
  return

check_clean:
  /* ---------------------------------------------------------\
  | Name:      check_clean                                     |
  |                                                            |
  | Function:  Checks if working dir is clean                  |
  |            returns YES or NO                               |
  \---------------------------------------------------------- */
  cmd = 'cd 'omvsdir '&& git status'
  x = docmd(cmd)
  clast = so.0
  if pos('working tree clean',so.clast) > 0 then return 'YES'
  else return "NO"

  /* ----------------------------------------------------- *
  | Get the users current OMVS enviornment for use in the |
  | bpxwunix commands.                                    |
  * ----------------------------------------------------- */

docmd:
  parse arg cmd
  drop so. se.
  x = bpxwunix(cmd,,so.,se.,env.,1)
  return x

docmdx:
  /* quircky thing, we need to export HOME as we are
  not running a login shell via bpxwunix */
  parse arg cmd
  drop o. se.
  Address ISPExec 'vget (gitenv)'
  if gitenv /= null
  then envfile = '.' gitenv ' >/dev/null 2>&1 &&'
  else envfile = null

  /* check for users .profile */
  address syscall 'lstat' "'"home"/.profile'" 'x.'
  if x.0 > 0 then home_profile =  ". "home"/.profile &&"
     else home_profile = null

  rx = 'export HOME='home' && . /etc/profile > /dev/null 2>&1 && ' ,
       home_profile envfile
  r = rx ' ' cmd
  return r

  /* ---------------------------------------------------------- *
  | Generalized routine to view stdout. (so.) or stderr. (se.) |
  | based on the parm passed                                   |
  * ---------------------------------------------------------- */
view_std:
  arg stdopt viewopt
  if stdopt = null then viewopt = 'B'
  if viewopt = null then viewopt = 'B'
  if stdopt = 'X' then stdopt = null
  if datatype(so.0) /= 'NUM' then so.0 = 0
  if datatype(se.0) /= 'NUM' then se.0 = 0
  if viewopt = 'B' then if so.0 + se.0 = 0 then return
  /* ------------------------------- *
  | Randomly define a DDName to use |
  * ------------------------------- */
  dd = 'zd'random(9999)
  /* --------------------------------------- *
  | Get lrecl to determine dcb for temp d/s |
  * --------------------------------------- */
  if stdopt /= 'C' then do
    vlrecl = 0
    do li  = 1 to so.0
      so.li = strip(so.li,'T')
      if length(so.li) > vlrecl then vlrecl = length(so.li)
      if so.li = null then so.li = ' '
    end
    do li  = 1 to se.0
      se.li = strip(se.li,'T')
      if length(se.li) > vlrecl then vlrecl = length(se.li)
      if se.li = null then se.li = ' '
    end
    sec = so.0 + se.0
  end
  else do
    do li = 1 to combine.0
      if length(combine.li) > vlrecl then vlrecl = length(combine.li)
    end
    sec = combine.0
  end
  if vlrecl < 81 then vlrecl = 80
  /* ------------------------------------------ *
  | Allocate a temporary data set for our data |
  * ------------------------------------------ */
  Address TSO
  /* calculate space needed with avg 50 bytes per record */
  prim = (((so.0 + se.0) * 50) % 56000) + 1
  if prim < 2 then prim = 5
  if viewopt = 'V' then do
    if sysvar('syspref') = null then pref = userid()'.'
    else pref = null
    vdsn = pref'work.zigi.gitdata'
  end
  else vdsn = null
  x = listdsi(vdsn)
  if x = 0 then do
    call outtrap 'x.'
    'delete' vdsn
    call outtrap 'off'
  end
  if vdsn /= null then vdsnp = 'da('vdsn') unit(3390)'
  else vdsnp = null
  'Alloc f('dd') new spa('prim','prim') tr' ,
    'recfm(v b) lrecl('vlrecl+4') blksize(0)' vdsnp
  /* ----------------------------- *
  | If stdopt is 'B' then do both |
  * ----------------------------- */
  if stdopt /= 'C' then do
    stdopt = null
    sc = so.0
    do xi = 1 to se.0
      sc = sc + 1
      so.sc = se.xi
    end
    so.0 = sc
  end
  /* ----------------------- *
  | Write out the stem data |
  * ----------------------- */
  if stdopt = 'C' then do
    'Execio * diskw' dd '(finis stem combine.'
    drop combine.
    combine.0 = 0
  end
  if stdopt /= 'C' then do
    if stdopt = null
    then do
      'Execio * diskw' dd '(finis stem so.'
    end
    else do
      'Execio * diskw' dd '(finis stem se.'
    end
  end
  /* -------------------------------------------------- *
  | Access the Temporary Data Set using ISPF           |
  | Library Services.                                  |
  | Then using ISPF Browse service to browse the data. |
  | And use Library Services to Free the Data Set.     |
  * -------------------------------------------------- */
  Address ISPExec
  if sec > 0 then if viewopt = 'B' then do
    'lminit dataid(ddb) ddname('dd')'
    'browse dataid('ddb') panel(zigibrow)'
    'lmfree dataid('ddb')'
  end
  else do
    vmac = 'Panel(zigiedit) macro(zigivmac)'
    'view dataset('vdsn')' vmac
    vtitle = null
    'verase vtitle'
  end
  /* ----------------------------- *
  | Last Free the z/OS Allocation |
  * ----------------------------- */
  call outtrap 'x.'
  Address TSO ,
    'Free f('dd')'
  if vdsn /= null then
  Address TSO 'Delete' vdsn
  call outtrap 'off'
  return
